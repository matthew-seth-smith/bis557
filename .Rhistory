names(Downer$outcome)
head(Downer$outcome)
Downer$myopathy == 'absent'
sum(Downer$myopathy == 'present')
sum(Downer$myopathy == 'present', na.rm = TRUE)
sum(Downer$myopathy == 'absent', na.rm = TRUE)
sum(Downer$myopathy == NA)
435-418
435-223
212+127+95
View(Downer)
number_present <- sum(Downer$myopathy == 'present', na.rm = TRUE)
number_absent <- sum(Downer$myopathy == 'absent', na.rm = TRUE)
frac_surviving_present <- sum(Downer[Downer$myopathy == 'present', Downer$outcome == 'survived']) / number_present
frac_surviving_present <- sum(Downer[Downer$myopathy == 'present' && Downer$outcome == 'survived',]) / number_present
frac_surviving_present <- length(Downer[Downer$myopathy == 'present' && Downer$outcome == 'survived',]) / number_present
frac_surviving_absent <- length(Downer[Downer$myopathy == "absent" && Downer$outcome == "survived",])
frac_surviving_absent <- length(Downer[Downer$myopathy == "absent" && Downer$outcome == "survived",]) / number_absent
View(Downer)
rm(frac_surviving_absent)
frac_surviving_absent <- length(Downer[Downer$myopathy == "absent" && Downer$outcome == "survived",]) / number_absent
View(Downer)
length(Downer[Downer$myopathy == "absent",])
length(Downer[which(Downer$myopathy == "absent"),])
Downer$myopathy == "absent"
length(Downer[which(Downer$myopathy == "absent", na.rm =TRUE),])
View(Downer)
rm(list=ls())
data(Downer)
Downer <- na.omit(Downer)
View(Downer)
number_present <- sum(Downer$myopathy == "present")
number_absent <- sum(Downer$myopathy == "absent")
frac_surviving_present <- nrow(Downer[Downer$myopathy == "present" && Downer$outcome == "survived",]) / number_present
frac_surviving_absent <- nrow(Downer[Downer$myopathy == "absent" && Downer$outcome == "survived",]) / number_absent
View(Downer)
Downer[Downer$myopathy == "present" && Downer$outcome == "survived",]
Downer$myopathy == "present" && Downer$outcome == "survived"
which(Downer$myopathy == "present" && Downer$outcome == "survived")
Downer$myopathy == "present"
Downer$outcome == "survived"
Downer[1,]
total_survived_present <- 0
total_survived_absent <- 0
for (i in nrow(Downer)){
if (Downer$myopathy[i] == "present" && Downer$outcome[i] == "survived"){
total_survived_present <- total_survived_present + 1
}
if (Downer$myopathy[i] == "absent" && Downer$outcome[i] == "survived"){
total_survived_absent <- total_survived_absent + 1
}
}
total_survived_present <- 0
total_survived_absent <- 0
for (i in nrow(Downer)){
if (Downer$myopathy[i] == "present"){
total_survived_present <- total_survived_present + 1
}
if (Downer$myopathy[i] == "absent"){
total_survived_absent <- total_survived_absent + 1
}
}
Downer$myopathy[10]
total_survived_present <- 0
total_survived_absent <- 0
for (i in nrow(Downer)){
if (Downer$myopathy[i] == 'present'){
total_survived_present <- total_survived_present + 1
}
if (Downer$myopathy[i] == 'absent'){
total_survived_absent <- total_survived_absent + 1
}
}
for (i in 1:nrow(Downer)){
if (Downer$myopathy[i] == "present" && Downer$outcome[i] == "survived"){
total_survived_present <- total_survived_present + 1
}
if (Downer$myopathy[i] == "absent" && Downer$outcome[i] == "survived"){
total_survived_absent <- total_survived_absent + 1
}
}
total_survived_present <- 0
total_survived_absent <- 0
for (i in 1:nrow(Downer)){
if (Downer$myopathy[i] == "present" && Downer$outcome[i] == "survived"){
total_survived_present <- total_survived_present + 1
}
if (Downer$myopathy[i] == "absent" && Downer$outcome[i] == "survived"){
total_survived_absent <- total_survived_absent + 1
}
}
rm(frac_surviving_absent)
rm(frac_surviving_present)
frac_survived_present <- total_survived_present / number_present
frac_survived_absent <- total_survived_absent / number_absent
frac_survived_present
frac_survived_absent
?glm
?predict
?glm
fit1 <- glm(outcome ~ myopathy, family=binomial, Downer)
summary(fit1)
rm(fit1)
?rep
rep(1, 2)
Downer$outcome_num <- rep(0, nrow(Downer)) # Default
Downer$outcome_num[Downer$outcome == "survived"] <- 1
View(Downer)
Downer$myopathy_num <- rep(0, nrow(Downer)) # Default
Downer$myopathy_num[Downer$myopathy == "present"] <- 1
View(Downer)
fit1 <- glm(outcome_num ~ myopathy_num, family=binomial, Downer)
sumary(fit1)
summary(fit1)
install.packages("MASS")
library(MASS)
confint(fit1)
View(Downer)
fit1
exp(fit1$coefficients[2])
odds_survived_present <- frac_survived_present / (1 - frac_survived_present)
odds_survived_absent <- frac_survived_absent / (1 - frac_survived_absent)
odds_survived_absent / odds_survived_present
odds_survived_present <- frac_survived_present / (1 - frac_survived_present)
odds_survived_absent <- frac_survived_absent / (1 - frac_survived_absent)
odds_survived_present / odds_survived_absent
fit1
fit2 <- glm(outcome_num ~ ck, family=binomial, Downer)
summary(fit2)
Downer$log_ck <- log(Downer$ck)
group1 <- Downer[Downer$myopathy == "absent",]
group2 <- Downer[Downer$myopathy == "present",]
View(group1)
plot(density(group1$log_ck))
plot(density(group2$log_ck))
fit3 <- glm(outcome_num ~ log_ck, family=binomial, Downer)
summary(fit3)
View(Downer)
fit4 <- glm(log_ck ~ myopathy_num, family=binomial, Downer)
summary(fit4)
View(Downer)
fit4 <- glm(outcome_num ~ (log_ck + myopathy_num)^2, family=binomial, Downer)
summary(fit4)
e^(fit4$coefficients[2:4])
exp(fit4$coefficients[2:4])
?pchisq
1- pchisq(20015.39838404 - 20016.3, 5-3)
rm(list=ls())
df <- data.frame(Y=Y, X=X)
ggplot(df, aes(x=X, y=Y)) + geom_line()
?seq
?sqrt
?ggplot2
ggplot2
library(ggplot2)
cv <- seq(-2.5, 2.5, 0.005)
gamma <- (sqrt(2)-cv)/(sqrt(2)+cv)
df <- data.frame(cv, gamma)
ggplot(df, aes(x=cv, y=gamma)) + geom_point()
cv <- seq(-2.5, 1, 0.005)
gamma <- (sqrt(2)-cv)/(sqrt(2)+cv)
df <- data.frame(cv, gamma)
ggplot(df, aes(x=cv, y=gamma)) + geom_point()
cv <- seq(-2.5, 1, 0.005)
gamma <- (sqrt(2)-cv)/(sqrt(2)+cv)
df <- data.frame(cv, gamma)
ggplot(df, aes(x=cv, y=gamma)) + geom_point() + ylab(expression(gamma))
gamma_slope <- function(x) (sqrt(2)-x)/(sqrt(2)+x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(gamma_slope) + xlim(-2,1)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-2,1)
rm(list=ls())
clr
gamma_slope <- function(x) (sqrt(2)-x)/(sqrt(2)+x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-2,1) + labs(x=cv, y=expression(gamma))
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-2,1) + labs(x="cv", y="expression(gamma)")
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-2,1) + labs(x="cv", y=expression(gamma))
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-2*sqrt(2),0) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=0, color="red") + geom_vline(xintercept=-sqrt(2), color = "blue")
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-2*sqrt(2),0) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=0, color="red") + geom_vline(xintercept=-sqrt(2), color = "blue", label=expression(-sqrt(2)))
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-2*sqrt(2),0) + ylim(-5,5) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=0, color="red") + geom_vline(xintercept=-sqrt(2), color = "blue")
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-2*sqrt(2),0) + ylim(-10,10) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=-1, color="red") + geom_vline(xintercept=-sqrt(2), color = "blue")
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-5*sqrt(2),3*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=-1, color="red") + geom_vline(xintercept=-sqrt(2), color = "blue")
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-5*sqrt(2),3*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=-1, color="red") + geom_hline(yintercept=1, color="green") + geom_vline(xintercept=-sqrt(2), color = "blue")
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-5*sqrt(2),3*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=-1, color="red") + geom_hline(yintercept=1, color="blue") + geom_vline(xintercept=-sqrt(2), color = "green") + geom_vline(xintercept=0, color = "purple")
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-5*sqrt(2),3*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=-1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept=-sqrt(2), color = "green") + geom_vline(xintercept=0, color = "purple", linetype=2) + geom_vline(xintercept=sqrt(2), color = "orange")
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-5*sqrt(2),3*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=-1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept=-sqrt(2), color = "green") + geom_vline(xintercept=0, color = "purple", linetype=2) + geom_vline(xintercept=sqrt(2), color = "orange", linetype=2)
inverse_gamma_slope <-function(x) (sqrt(2)+x)/(sqrt(2)-x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=inverse_gamma_slope) + xlim(-3*sqrt(2),5*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(frac(1,gamma))) + geom_hline(yintercept=-1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept=sqrt(2), color="green") + geon_vline(xintercept=0, color="purple", linetype=2)
library(ggplot2)
inverse_gamma_slope <-function(x) (sqrt(2)+x)/(sqrt(2)-x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=inverse_gamma_slope) + xlim(-3*sqrt(2),5*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(frac(1,gamma))) + geom_hline(yintercept=-1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept=sqrt(2), color="green") + geon_vline(xintercept=0, color="purple", linetype=2)
inverse_gamma_slope <-function(x) (sqrt(2)+x)/(sqrt(2)-x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=inverse_gamma_slope) + xlim(-3*sqrt(2),5*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(frac(1,gamma))) + geom_hline(yintercept=-1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept=sqrt(2), color="green") + geom_vline(xintercept=0, color="purple", linetype=2)
gamma_slope <- function(x) (sqrt(2)-x)/(sqrt(2)+x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=gamma_slope) + xlim(-5*sqrt(2),3*sqrt(2)) + ylim(-10,10) + labs(x="cv", y=expression(gamma)) + geom_hline(yintercept=-1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept=-sqrt(2), color = "green") + geom_vline(xintercept=0, color = "purple", linetype=2) + geom_vline(xintercept=sqrt(2), color = "orange", linetype=2)
?ggplot2
??ggplot2
install.packages("cubature")
library(cubature)
rm(list=ls())
f <- function(x) {x}
adaptIntegrate(f, lowerLimit = 0, upperLimit = 1)
g <- function(x) {exp(-x^2/2)/(2*pi)}
g(0)
1/(2*pi)
adaptIntegrate(g, lowerLimit = -Inf, upperLimit = Inf)
adaptIntegrate(g, lowerLimit = 0, upperLimit = Inf)
h <- function(x) {1/x^2}
adaptIntegrate(h, lowerLimit = 1, upperLimit = Inf)
?adaptIntegrate
View(f)
View(g)
View(h)
View(f)
View(g)
library(cubature)
adaptIntegrate(g, 0, Inf)
new_function <- function(x) {1/(x[1]*x[2])^2}
View(new_function)
adaptIntegrate(new_function, c(1, 1), c(Inf, Inf))
adaptIntegrate(new_function, c(1, 1), c(2, 2))
library(ggplot2)
slope <- function(x) (1-x)(1+x)
ggplot(data.frame(x=0), aed(x=x)) + stat_function(fun=slope) + xlim(-4, 4) + ylim(-10,10) + labs(x="y", y=expression(frac((1-y),(1+y)))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = -1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2) + geom_vline(xintercept = 1, color = "orange", lintype=2)
library(ggplot2)
slope <- function(x) (1-x)(1+x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=slope) + xlim(-4, 4) + ylim(-10,10) + labs(x="y", y=expression(frac((1-y),(1+y)))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = -1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2) + geom_vline(xintercept = 1, color = "orange", lintype=2)
View(slope)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=slope) + xlim(-4, 4) + ylim(-10,10) + labs(x="y", y=expression(frac((1-y),(1+y)))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = -1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2) + geom_vline(xintercept = 1, color = "orange", linetype=2)
slope
rm(slope)
yslope <- function(x) (1-x)(1+x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=yslope) + xlim(-4, 4) + ylim(-10,10) + labs(x="y", y=expression(frac((1-y),(1+y)))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = -1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2) + geom_vline(xintercept = 1, color = "orange", linetype=2)
yslope <- function(x) (1-x)(1+x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=yslope) + xlim(-4, 4) + ylim(-10,10) + labs(x="y", y=expression(frac((1-y),(1+y)))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = -1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2) + geom_vline(xintercept = 1, color = "orange", linetype=2)
View(yslope)
yslope <- function(x) (1-x)/(1+x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=yslope) + xlim(-4, 4) + ylim(-10,10) + labs(x="y", y=expression(frac((1-y),(1+y)))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = -1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2) + geom_vline(xintercept = 1, color = "orange", linetype=2)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=yslope) + xlim(-5, 3) + ylim(-10,10) + labs(x="y", y=expression(frac((1-y),(1+y)))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = -1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2) + geom_vline(xintercept = 1, color = "orange", linetype=2)
inverse_yslope <- function(x) (1+x)/(1-x)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=inverse_yslope) + xlim(-3, 5) + ylim(-10,10) + labs(x="y", y=expression(frac(1+y),(1-y))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = 1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2)
library(ggplot2)
ggplot(data.frame(x=0), aes(x=x)) + stat_function(fun=inverse_yslope) + xlim(-3, 5) + ylim(-10,10) + labs(x="y", y=expression(frac((1+y),(1-y)))) + geom_hline(yintercept = -1, color="red") + geom_hline(yintercept=1, color="blue", linetype=2) + geom_vline(xintercept = 1, color = "green") + geom_vline(xintercept = 0, color = "purple", linetype = 2)
install.packages("vglm")
?vglm
??vglm
install.packages("vgam")
install.packages("VGAM")
update()
update(R)
updateR
install.packages("updateR")
install.packages("installr")
if(!require(installr)) {install.packages("installr"), require(installr)}
if(!require(installr)) {install.packages("installr"); require(installr)}
devtools::install_github('talgalili/installr')
install.packages("installr")
install.packages("alr4")
install.packages("backports")
install.packages("barcode")
install.packages("base64enc")
install.packages("bitops", "catools")
install.packages("bitops")
install.packages("catools")
install.packages("caTools")
install.packages("coda")
install.packages("cubfits")
install.packages("dichromat")
install.packages("digest")
install.packages("evaluate", "faraway", "foreach", "formatR", "gdata")
install.packages("faraway")
install.packages("formatR")
install.packages("gdata")
install.packages("ggplot2", "GGally")
install.packages("GGally"_)
install.packages("GGally")
install.packages("gmodels")
install.packages("gpairs")
install.packages("highr")
install.packages("htmltools")
install.packages("joineR")
install.packages("jsonlite")
library(tcltk)
library(flexsurv)
?rgengamma
?rgengamma.orig
?rggamma
?write.csv
?beta
?proc.time
for(i in 1:10){paste("Gamma_Data_",i,".csv", sep="")}
paste("Gamma_Data_",i,".csv", sep="")
for(i in 1:10){print(paste("Gamma_Data_",i,".csv", sep=""))}
?roc
form <- y ~ x1 + x2
form
as.character(form)
as.character(form)[2]
fit <- lm(Sepal.Length ~., iris)
fit$coefficients
class(fit$coefficients)
summary(fit)
ret <- list()
ret
ret$coeficients <- rnorm(3)
ret
names(ret)
class(ret)
class(ret) <- "lm"
ret
ret$coefficients <- rnorm(3)
ret
class(ret)
ncol(model.matrix(form))
ncol(model.matrix(form,iris))
form
df <- data.frame(x1=(1,1,1),x2=(2,2,3))
df <- data.frame(x1=c(1,1,1),x2=c(2,2,3))
model.matrix(form,df)
?model.matrix
df$y <- c(3,4,5)
model.matrix(form,df)
ncol(model.matrix(form,df))
colnames(model.matrix(form,df))
df
a <- c(TRUE, FALSE)
b <- c(TRUE, TRUE)
a && b
a & b
a || b
a | b
rm(list=ls())
as.numeric(" 90 ")
as.numeric(" 90 ") == 90
as.numeric(" 90") == 90
as.numeric("90 ") == 90
library(faraway)
data(pima)
pima$bmi
plot(density(pima$bmi))
summary(pima$bmi)
NA < 0
summary(pima)
1 in 1:10
i in 1:10
?IN
setwd("~/Documents/YSPH/YSPH_Year2/BIS_557/bis557")
rm(list=ls())
data("lm_patho")
data(iris)
document()
library(devtools)
document()
document()
x <- c(1,2,3)
x <- data.frame(x)
View(x)
x <- c(1,2,3)
x <- data.frame(x)
rm(x)
iris_red <- iris[,-1]
which(colnames(iris_red) in colnames(iris))
which(colnames(iris_red) IN colnames(iris))
which(colnames(iris_red) == colnames(iris))
formula <- Sepal.Width ~ .
X <- stats::model.matrix(formula, iris) #This is our model matrix of the data for the model
coef_out <- as.list(rep(NA, ncol(X))) #Initialize the output
names(coef_out) <- colnames(X) #Naming the coefficients
y_index <- which(colnames(iris) == as.character(formula)[2]) #This is where in the data we can find the response variable
y <- data[,y_index] #Get the vector of the response data
y_index
y <- iris[,y_index]
rm(iris_red)
omitted <- rownames(stats::alias(formula, data)$Complete) #Alias removes the dependencies. This returns the columns to be omitted
Xred <- X[,setdiff(colnames(X), omitted)] #Remove the linearly dependent columns, to get a reduced data set
# Using Chapter 2, Section 5 of A Computational Approach to Statistical Learning:
svd_list <- svd(Xred)
sv <- svd_list[["d"]] #The singular values of X
sigma_inverse <- diag(1/sv) #The sigma^-1 matrix, where sigma is a matrix of singular values in decreasing order
U <- svd_list[["u"]] #U matrix of SVD
V <- svd_list[["v"]] #V matrix of SVD
beta_hat <- V %*% sigma_inverse %*% t(U) %*% y
omitted <- rownames(stats::alias(formula, iris)$Complete) #Alias removes the dependencies. This returns the columns to be omitted
Xred <- X[,setdiff(colnames(X), omitted)] #Remove the linearly dependent columns, to get a reduced data set
# Using Chapter 2, Section 5 of A Computational Approach to Statistical Learning:
svd_list <- svd(Xred)
sv <- svd_list[["d"]] #The singular values of X
sigma_inverse <- diag(1/sv) #The sigma^-1 matrix, where sigma is a matrix of singular values in decreasing order
U <- svd_list[["u"]] #U matrix of SVD
V <- svd_list[["v"]] #V matrix of SVD
beta_hat <- V %*% sigma_inverse %*% t(U) %*% y
View(Xred)
View(X)
coef_out
coef_out[[colnames(Xred)]] <- beta_hat
rm(coef_out)
coef_out <- data.frame(rep(NA, ncol(X)))
rownames(coef_out) <- colnames(X)
coef_out
coef_out[colnames(Xred),1] <- beta_hat
coef_out
rm(list=ls())
data("lm_patho")
X <- stats::model.matrix(formula, lm_patho) #This is our model matrix of the data for the model
coef_out <- data.frame(rep(NA, ncol(X))) #Initialize the output
rownames(coef_out) <- colnames(X) #Naming the coefficients
y_index <- which(colnames(lm_patho) == as.character(formula)[2]) #This is where in the data we can find the response variable
y <- lm_patho[,y_index] #Get the vector of the response data
# Using the alias command to remove dependencies, as suggested by Cathy Xue
omitted <- rownames(stats::alias(formula, data)$Complete) #Alias removes the dependencies. This returns the columns to be omitted
Xred <- X[,setdiff(colnames(X), omitted)] #Remove the linearly dependent columns, to get a reduced data set
formula <- y ~ .
X <- stats::model.matrix(formula, lm_patho) #This is our model matrix of the data for the model
coef_out <- data.frame(rep(NA, ncol(X))) #Initialize the output
rownames(coef_out) <- colnames(X) #Naming the coefficients
y_index <- which(colnames(lm_patho) == as.character(formula)[2]) #This is where in the data we can find the response variable
y <- lm_patho[,y_index] #Get the vector of the response data
# Using the alias command to remove dependencies, as suggested by Cathy Xue
omitted <- rownames(stats::alias(formula, data)$Complete) #Alias removes the dependencies. This returns the columns to be omitted
Xred <- X[,setdiff(colnames(X), omitted)] #Remove the linearly dependent columns, to get a reduced data set
omitted <- rownames(stats::alias(formula, lm_patho)$Complete) #Alias removes the dependencies. This returns the columns to be omitted
Xred <- X[,setdiff(colnames(X), omitted)] #Remove the linearly dependent columns, to get a reduced data set
y_index
X
Xred
lm_patho
class(omitted)
svd_list <- svd(Xred)
sv <- svd_list[["d"]] #The singular values of X
sigma_inverse <- diag(1/sv) #The sigma^-1 matrix, where sigma is a matrix of singular values in decreasing order
U <- svd_list[["u"]] #U matrix of SVD
V <- svd_list[["v"]] #V matrix of SVD
beta_hat <- V %*% sigma_inverse %*% t(U) %*% y
coef_out[colnames(Xred),1] <- beta_hat
coef_out
beta_hat
colnames(Xred)
colnames(coef_out)
ret <- list() #Initialize the return object
class(ret) <- "lm" #Make the return object an lm object
#Assign the formula and data to the call field of the lm object. I used as.name to remove the quotes:
ret$call <- as.name(paste(c("linear_model(formula = ", formula, ", data = ", deparse(substitute(data)), ")"), sep="", collapse=""))
ret$coefficients <- unlist(coef_out) #Assign the coefficients of this lm object to be the ones we determined earlier
ret
colnames(coef_out) <- ""
coef_out
ret <- list() #Initialize the return object
class(ret) <- "lm" #Make the return object an lm object
#Assign the formula and data to the call field of the lm object. I used as.name to remove the quotes:
ret$call <- as.name(paste(c("linear_model(formula = ", formula, ", data = ", deparse(substitute(data)), ")"), sep="", collapse=""))
ret$coefficients <- coef_out #Assign the coefficients of this lm object to be the ones we determined earlier
ret
coef_out <- t(coef_out)
coef_out
ret <- list() #Initialize the return object
class(ret) <- "lm" #Make the return object an lm object
#Assign the formula and data to the call field of the lm object. I used as.name to remove the quotes:
ret$call <- as.name(paste(c("linear_model(formula = ", formula, ", data = ", deparse(substitute(data)), ")"), sep="", collapse=""))
ret$coefficients <- coef_out #Assign the coefficients of this lm object to be the ones we determined earlier
ret
ret$call <- as.name(paste(c("linear_model(formula = ", formula, ", data = ", deparse(substitute(lm_patho)), ")"), sep="", collapse=""))
ret
lm(y ~ ., lm_patho)
document()
?linear_model
document()
?linear_model
rm(list=ls())
data(iris)
data("lm_patho")
linear_model(Sepal.Width ~ ., iris)
lm(Sepal.Width ~ ., iris)
document()
linear_model(Sepal.Width ~ ., iris)
document()
linear_model(Sepal.Width ~ ., iris)
lm(Sepal.Width ~ ., data=iris)
lm(y~.,lm_patho)
linear_model(y ~ ., lm_patho)
document()
test()
check()
formula <- y ~ .
X <- stats::model.matrix(formula, lm_patho) #This is our model matrix of the data for the model
coef_out <- data.frame(rep(NA, ncol(X))) #Initialize the output
rownames(coef_out) <- colnames(X) #Naming the coefficients
y_index <- which(colnames(lm_patho) == as.character(formula)[2]) #This is where in the data we can find the response variable
y <- lm_patho[,y_index] #Get the vector of the response data
# Using the alias command to remove dependencies, as suggested by Cathy Xue
omitted <- rownames(stats::alias(formula, lm_patho)$Complete) #Alias removes the dependencies. This returns the columns to be omitted
Xred <- X[,setdiff(colnames(X), omitted)] #Remove the linearly dependent columns, to get a reduced data set
svd_list <- svd(Xred)
sv <- svd_list[["d"]] #The singular values of X
sigma_inverse <- diag(1/sv) #The sigma^-1 matrix, where sigma is a matrix of singular values in decreasing order
U <- svd_list[["u"]] #U matrix of SVD
V <- svd_list[["v"]] #V matrix of SVD
beta_hat <- V %*% sigma_inverse %*% t(U) %*% y
coef_out[colnames(Xred),1] <- beta_hat
colnames(coef_out) <- ""
coef_out <- t(coef_out) #Make horizontal for output
coef_out <- as.list(coef_out) #Make a list, as it would be in an lm object
names(coef_out) <- colnames(X) #Putting the names back
coef_out
lm(y~.,lm_patho)
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
document()
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
test()
1e-05 - 9.97e-06
linear_model(y~.,lm_patho)
lm(y~., lm_patho)
